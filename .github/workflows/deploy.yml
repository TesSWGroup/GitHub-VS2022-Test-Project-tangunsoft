# 워크플로의 이름을 정의합니다. 이 이름은 GitHub의 Actions 탭에서 표시됩니다.
name: GitHub Actions 실행시켜보기

# 워크플로우가 실행될 조건을 지정합니다.
on:
  # push 이벤트 발생 시 실행
  push:
    branches: [ "main" ]
  # pull request 이벤트 발생 시 실행
  pull_request:
    branches: [ "main" ]
  # 수동으로 워크플로우를 실행할 수 있게 함
  workflow_dispatch:

# 워크플로우에서 실행할 작업들을 정의합니다.
jobs:
  # Build-And-Analysis라는 이름의 작업을 정의합니다.
  Build-And-Analysis:
    # 작업이 실행될 운영체제를 지정합니다.
    runs-on: windows-latest
    
    # 권한 설정
    permissions:
      # security-events 쓰기 권한 필요 (CodeQL 결과 업로드용)
      security-events: write
      # actions 읽기 권한 필요
      actions: read
      # contents 읽기 권한 필요
      contents: read

    # 작업의 각 단계를 정의합니다.
    steps:
      # Step 1: 코드 체크아웃
      - name: 코드 체크아웃
        uses: actions/checkout@v3

      # Step 2: Visual Studio 개발 환경 설정
      - name: Visual Studio 개발 환경 설정
        uses: microsoft/setup-msbuild@v1.0.2

      # Step 3: Visual Studio 솔루션 빌드
      - name: 솔루션 빌드
        run: |
          msbuild /p:Configuration=Release

      # Step 4: CodeQL 초기화
      - name: CodeQL 초기화
        uses: github/codeql-action/init@v3
        with:
          languages: cpp
          queries: security-and-quality

      # Step 5: CodeQL 분석 실행
      - name: CodeQL 분석 실행
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:cpp"

      # [수정된 부분 시작] - Cppcheck 설치 및 실행 단계 추가
      # Step 6: Cppcheck 설치 - MSI 인스톨러를 사용하여 자동 설치
      - name: Cppcheck 설치
        run: |
          # 특정 버전(2.13.0)의 Cppcheck MSI 인스톨러 다운로드
          $url = "https://github.com/danmar/cppcheck/releases/download/2.13.0/cppcheck-2.13.0-x64-Setup.msi"
          $output = "cppcheck-setup.msi"
          Invoke-WebRequest -Uri $url -OutFile $output
          # 자동 설치 실행 (/quiet /qn: 사용자 상호작용 없이 자동 설치)
          Start-Process msiexec.exe -ArgumentList "/i $output /quiet /qn" -Wait
          # 시스템 환경 변수 PATH 업데이트
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine")
        shell: pwsh

      # Step 7: Cppcheck 분석 실행 - XML 형식으로 결과 출력
      - name: Cppcheck 분석 실행
        run: |
          # --enable=all: 모든 검사 활성화
          # --xml: XML 형식으로 출력
          # --output-file: 결과를 파일로 저장
          cppcheck --enable=all --xml --output-file=cppcheck-result.xml .
        shell: cmd

      # Step 8: Python 설치 - XML을 SARIF로 변환하기 위해 필요
      - name: Python 설치
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 9: XML을 SARIF로 변환 - GitHub Security 탭에서 결과를 보기 위해 필요
      - name: XML을 SARIF로 변환
        run: |
          # Python 스크립트 생성 - XML을 SARIF 형식으로 변환하는 스크립트
          @"
          import json
          import xml.etree.ElementTree as ET
          import sys
          import os
          
          def convert_to_sarif(xml_file, sarif_file):
              # XML 파일 파싱
              tree = ET.parse(xml_file)
              root = tree.getroot()
              
              # SARIF 2.1.0 형식의 기본 구조 생성
              sarif_output = {
                  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
                  "version": "2.1.0",
                  "runs": [
                      {
                          "tool": {
                              "driver": {
                                  "name": "Cppcheck",
                                  "version": root.find(".//cppcheck").get("version"),
                                  "rules": []
                              }
                          },
                          "results": []
                      }
                  ]
              }
              
              # Cppcheck 결과를 SARIF 형식으로 변환
              for error in root.findall(".//error"):
                  result = {
                      "ruleId": error.get("id"),
                      "level": "error" if error.get("severity") == "error" else "warning",
                      "message": {
                          "text": error.get("msg")
                      },
                      "locations": []
                  }
                  
                  # 소스 코드 위치 정보 추가
                  for location in error.findall("location"):
                      result["locations"].append({
                          "physicalLocation": {
                              "artifactLocation": {
                                  "uri": location.get("file").replace("\\", "/")
                              },
                              "region": {
                                  "startLine": int(location.get("line")),
                                  "startColumn": int(location.get("column")) if location.get("column") else 1
                              }
                          }
                      })
                  
                  sarif_output["runs"][0]["results"].append(result)
              
              # SARIF 파일 저장 (UTF-8 인코딩 사용)
              with open(sarif_file, "w", encoding="utf-8") as f:
                  json.dump(sarif_output, f, indent=2)
          
          if __name__ == "__main__":
              convert_to_sarif("cppcheck-result.xml", "cppcheck-results.sarif")
          "@ | Out-File -Encoding UTF8 convert_to_sarif.py
          
          # 변환 스크립트 실행
          python convert_to_sarif.py
        shell: pwsh

      # Step 10: SARIF 결과 업로드 - GitHub Security 탭에 결과 표시
      - name: SARIF 결과 업로드
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: cppcheck-results.sarif
          category: Cppcheck
      # [수정된 부분 끝]

# 워크플로의 이름을 정의합니다. 이 이름은 GitHub의 Actions 탭에서 표시됩니다.
name: GitHub Actions 실행시켜보기

# 워크플로우가 실행될 조건을 지정합니다.
on:
  # push 이벤트 발생 시 실행
  push:
    branches: [ "main" ]
  # pull request 이벤트 발생 시 실행
  pull_request:
    branches: [ "main" ]
  # 수동으로 워크플로우를 실행할 수 있게 함
  workflow_dispatch:

# 워크플로우에서 실행할 작업들을 정의합니다.
jobs:
  # Build-And-Analysis라는 이름의 작업을 정의합니다.
  Build-And-Analysis:
    # 작업이 실행될 운영체제를 지정합니다.
    runs-on: windows-latest
    
    # 권한 설정
    permissions:
      # security-events 쓰기 권한 필요 (CodeQL 결과 업로드용)
      security-events: write
      # actions 읽기 권한 필요
      actions: read
      # contents 읽기 권한 필요
      contents: read

    # 작업의 각 단계를 정의합니다.
    steps:
      # Step 1: 코드 체크아웃
      - name: 코드 체크아웃
        uses: actions/checkout@v3

      # Step 2: Visual Studio 개발 환경 설정
      - name: Visual Studio 개발 환경 설정
        uses: microsoft/setup-msbuild@v1.0.2

      # Step 3: CodeQL 초기화
      - name: CodeQL 초기화
        uses: github/codeql-action/init@v3
        with:
          languages: cpp
          queries: security-and-quality

      # Step 4: Visual Studio 솔루션 빌드 (CodeQL 추적 포함)
      - name: 솔루션 빌드
        run: |
          # MSBuild 명령에 자세한 출력 옵션 추가
          msbuild /p:Configuration=Release /v:detailed
        env:
          # CodeQL이 빌드 명령을 추적할 수 있도록 환경 변수 설정
          CODEQL_EXTRACTOR_CPP_TRAP_CACHING: false
          CODEQL_EXTRACTOR_CPP_VERBOSE: 1

      # Step 5: CodeQL 분석 실행
      - name: CodeQL 분석 실행
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:cpp"

      # Step 6: Cppcheck 설치
      - name: Cppcheck 설치
        run: |
          # Cppcheck MSI 다운로드 및 설치
          $url = "https://github.com/danmar/cppcheck/releases/download/2.17.1/cppcheck-2.17.1-x64-Setup.msi"
          $output = "cppcheck-setup.msi"
          Invoke-WebRequest -Uri $url -OutFile $output
          Start-Process msiexec.exe -ArgumentList "/i $output /quiet /qn" -Wait
          Start-Sleep -Seconds 10
          
          # 환경 변수 설정
          $env:PATH += ";C:\Program Files\Cppcheck"
          [Environment]::SetEnvironmentVariable("PATH", $env:PATH, "Machine")
        shell: pwsh

      # Step 7: Cppcheck 분석 실행
      - name: Cppcheck 분석 실행
        run: |
          # errorlist.xml 생성
          & "C:\Program Files\Cppcheck\cppcheck.exe" "--errorlist" > errorlist.xml
          
          # 분석 실행 및 XML 보고서 생성
          & "C:\Program Files\Cppcheck\cppcheck.exe" "--enable=all" "--xml" "--xml-version=2" "--output-file=report.xml" "."
        shell: pwsh

      # Step 8: Cppcheck XML을 SARIF로 변환
      - name: XML을 SARIF로 변환
        uses: Flast/cppcheck-sarif@v2
        with:
          errorlist: errorlist.xml
          input: report.xml
          output: report.sarif

      # Step 9: SARIF 결과 업로드
      - name: SARIF 결과 업로드
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: report.sarif
          category: Cppcheck

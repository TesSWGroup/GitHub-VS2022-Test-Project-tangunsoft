# 워크플로의 이름을 정의합니다. 이 이름은 GitHub의 Actions 탭에서 표시됩니다.
name: GitHub Actions 실행시켜보기

# 워크플로우가 실행될 조건을 지정합니다.
on:
  # push 이벤트 발생 시 실행
  push:
    branches: [ "main" ]
  # pull request 이벤트 발생 시 실행
  pull_request:
    branches: [ "main" ]
  # 수동으로 워크플로우를 실행할 수 있게 함
  workflow_dispatch:

# 워크플로우에서 실행할 작업들을 정의합니다.
jobs:
  # Build-And-Analysis라는 이름의 작업을 정의합니다.
  Build-And-Analysis:
    # 작업이 실행될 운영체제를 지정합니다.
    runs-on: windows-latest
    
    # 권한 설정
    permissions:
      # security-events 쓰기 권한 필요 (CodeQL 결과 업로드용)
      security-events: write
      # actions 읽기 권한 필요
      actions: read
      # contents 읽기 권한 필요
      contents: read

    # 작업의 각 단계를 정의합니다.
    steps:
      # Step 1: 코드 체크아웃
      - name: 코드 체크아웃
        uses: actions/checkout@v3

      # Step 2: Visual Studio 개발 환경 설정
      - name: Visual Studio 개발 환경 설정
        uses: microsoft/setup-msbuild@v1.0.2

      # Step 3: CodeQL 초기화
      - name: CodeQL 초기화
        uses: github/codeql-action/init@v3
        with:
          languages: cpp
          queries: security-and-quality

      # Step 4: Visual Studio 솔루션 빌드 (CodeQL 추적 포함)
      - name: 솔루션 빌드
        run: |
          # MSBuild 명령에 자세한 출력 옵션 추가
          msbuild /p:Configuration=Release /v:detailed
        env:
          # CodeQL이 빌드 명령을 추적할 수 있도록 환경 변수 설정
          CODEQL_EXTRACTOR_CPP_TRAP_CACHING: false
          CODEQL_EXTRACTOR_CPP_VERBOSE: 1

      # Step 5: CodeQL 분석 실행
      - name: CodeQL 분석 실행
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:cpp"

      # Step 6: Cppcheck 설치
      - name: Cppcheck 설치
        run: |
          $url = "https://github.com/danmar/cppcheck/releases/download/2.17.1/cppcheck-2.17.1-x64-Setup.msi"
          $output = "cppcheck-setup.msi"
          Invoke-WebRequest -Uri $url -OutFile $output
          Start-Process msiexec.exe -ArgumentList "/i $output /quiet /qn" -Wait
          Start-Sleep -Seconds 10
          $cppcheckPath = "C:\Program Files\Cppcheck"
          Write-Host "Cppcheck installation path: $cppcheckPath"
          $env:Path += ";$cppcheckPath"
          Write-Host "Current PATH: $env:Path"
        shell: pwsh

      # Step 7: Python 설치 (SARIF 변환용)
      - name: Python 설치
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 8: Cppcheck 분석 실행 및 SARIF 변환
      - name: Cppcheck 분석 실행
        shell: pwsh
        run: |
          # 배치 파일 생성
          $batchContent = @'
@echo off
"C:\Program Files\Cppcheck\cppcheck.exe" --enable=all --xml --xml-version=2 --output-file=cppcheck-result.xml .
'@
          Set-Content -Path "cppcheck-run.bat" -Value $batchContent -Encoding ASCII

          # 배치 파일 실행
          .\cppcheck-run.bat
          
          # Python 스크립트 생성
          $pythonScript = @'
import json
import xml.etree.ElementTree as ET
import sys
import os

def convert_to_sarif(xml_file, sarif_file):
    tree = ET.parse(xml_file)
    root = tree.getroot()
    
    sarif_output = {
        "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
        "version": "2.1.0",
        "runs": [
            {
                "tool": {
                    "driver": {
                        "name": "Cppcheck",
                        "version": "2.17.1",
                        "rules": []
                    }
                },
                "results": []
            }
        ]
    }
    
    for error in root.findall(".//error"):
        result = {
            "ruleId": error.get("id"),
            "level": "error" if error.get("severity") == "error" else "warning",
            "message": {
                "text": error.get("msg")
            },
            "locations": []
        }
        
        for location in error.findall("location"):
            result["locations"].append({
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": location.get("file").replace("\\", "/")
                    },
                    "region": {
                        "startLine": int(location.get("line")),
                        "startColumn": 1,
                        "endColumn": 2
                    }
                }
            })
        
        sarif_output["runs"][0]["results"].append(result)
    
    with open(sarif_file, "w", encoding="utf-8") as f:
        json.dump(sarif_output, f, indent=2)

if __name__ == "__main__":
    convert_to_sarif("cppcheck-result.xml", "cppcheck-results.sarif")
'@
          
          # Python 스크립트를 파일로 저장
          Set-Content -Path "convert_to_sarif.py" -Value $pythonScript -Encoding UTF8
          
          # Python 스크립트 실행
          python convert_to_sarif.py

      # Step 9: SARIF 결과 업로드
      - name: SARIF 결과 업로드
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: cppcheck-results.sarif
          category: Cppcheck

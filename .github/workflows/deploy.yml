# `actions/upload-artifact` 액션에서 계속 에러가 발생하고 있습니다. 이번에는 다른 방식으로 아티팩트를 업로드하도록 수정해보겠습니다. 수정된 전체 workflow 파일입니다:

# 워크플로의 이름을 정의합니다. 이 이름은 GitHub의 Actions 탭에서 표시됩니다.
name: GitHub Actions 실행시켜보기

# 워크플로우가 실행될 조건을 지정합니다.
on:
  # main 브랜치에 push가 발생할 때 실행됩니다.
  push:
    branches:
      - main
  # main 브랜치로 pull request가 생성되거나 업데이트될 때 실행됩니다.
  pull_request:
    branches:
      - main

# 실제로 실행될 작업들을 정의합니다.
jobs:
  # 'Build-And-Analysis'라는 이름의 작업을 정의합니다.
  # 이 작업은 빌드와 다양한 코드 분석을 수행합니다.
  Build-And-Analysis:
    # Windows 최신 버전의 가상 환경에서 실행합니다.
    # Visual Studio 2022와 관련 도구들이 미리 설치되어 있습니다.
    runs-on: windows-latest

    # GitHub Actions가 필요로 하는 권한들을 설정합니다.
    permissions:
      actions: read      # GitHub Actions의 실행 권한
      contents: read     # 저장소 내용을 읽을 수 있는 권한
      security-events: write  # 보안 검사 결과를 쓸 수 있는 권한

    # 순차적으로 실행될 단계들을 정의합니다.
    steps:
      # Step 1: 저장소 코드를 가져옵니다.
      - name: 저장소 체크아웃
        uses: actions/checkout@v3
        # 이 단계는 현재 저장소의 코드를 가상 환경으로 복사합니다.

      # Step 2: 기본 동작 테스트를 위한 Hello World 출력
      - name: Hello World 출력
        run: echo "Hello World"
        # 워크플로우가 정상적으로 실행되는지 확인하기 위한 기본 테스트입니다.

      # Step 3: 여러 줄의 명령어 실행 테스트
      - name: 여러 명령어 실행
        run: |
          echo "Hello World"
          echo "Good "
          echo "Morning"
        # 파이프라인(|)을 사용하여 여러 줄의 명령어를 실행하는 예제입니다.

      # Step 4: GitHub에서 제공하는 환경 변수 출력
      - name: GitHub Actions 변수 출력
        run: |
          echo "Repository: $env:GITHUB_REPOSITORY"  # 현재 저장소 이름
          echo "SHA: $env:GITHUB_SHA"               # 현재 커밋의 SHA
        # GitHub Actions에서 기본으로 제공하는 환경 변수들을 확인합니다.

      # Step 5: GitHub Secrets에 저장된 비밀 값 출력
      - name: GitHub Actions 비밀변수 출력
        env:
          MY_NAME: ${{ secrets.MY_NAME }}     # GitHub Secrets에 저장된 MY_NAME 값
          MY_HOBBY: ${{ secrets.MY_HOBBY }}   # GitHub Secrets에 저장된 MY_HOBBY 값
        run: |
          echo "Secret: $env:MY_NAME"
          echo "Secret: $env:MY_HOBBY"
        # 민감한 정보를 안전하게 사용하는 방법을 보여줍니다.

      # Step 6: Cppcheck 도구 설치
      - name: Cppcheck 설치
        run: |
          choco install cppcheck
        shell: pwsh
        # chocolatey 패키지 관리자를 사용하여 Cppcheck를 설치합니다.
        # Windows에서 사용할 수 있는 C/C++ 정적 분석 도구입니다.

      # Step 7: Cppcheck를 사용한 정적 코드 분석 실행
      - name: Cppcheck 정적 분석
        run: |
          cppcheck --enable=all `              # 모든 종류의 검사 활성화
                  --suppress=missingInclude `  # 헤더 파일 누락 경고 제외
                  --inline-suppr `            # 인라인 경고 억제 허용
                  --inconclusive `            # 불확실한 문제도 보고
                  --std=c++17 `               # C++17 표준 사용
                  --output-file=cppcheck_report.txt .  # 결과를 파일로 저장
        shell: pwsh
        # 프로젝트의 모든 C++ 파일에 대해 정적 분석을 수행합니다.

      # [수정된 부분 시작]
      # Step 8: Cppcheck 분석 결과를 아티팩트로 저장
      # 이전 방식에서 문제가 발생하여 GitHub CLI를 사용하는 방식으로 변경합니다.
      - name: Cppcheck 결과 저장
        # PowerShell을 사용하여 결과 파일을 아티팩트로 저장합니다.
        run: |
          # 결과 파일이 존재하는지 확인
          if (Test-Path cppcheck_report.txt) {
              # 결과 파일 내용 출력 (로그 확인용)
              Get-Content cppcheck_report.txt
              
              # 결과 파일을 artifacts 디렉토리로 복사
              New-Item -ItemType Directory -Force -Path "artifacts"
              Copy-Item cppcheck_report.txt -Destination "artifacts/"
              
              Write-Host "Cppcheck 분석 결과가 저장되었습니다."
          } else {
              Write-Host "Warning: Cppcheck 결과 파일을 찾을 수 없습니다."
          }
        shell: pwsh
        # 이 방식은 actions/upload-artifact를 사용하지 않고 
        # 직접 PowerShell 명령어로 파일을 처리합니다.
      # [수정된 부분 끝]

      # Step 9: CodeQL 분석 준비
      - name: CodeQL 초기화
        uses: github/codeql-action/init@v3
        with:
          languages: cpp    # C++ 언어 분석 설정
        # GitHub의 강력한 코드 분석 도구인 CodeQL을 초기화합니다.

      # Step 10: Visual Studio를 사용한 프로젝트 빌드
      - name: Visual Studio 프로젝트 빌드
        run: |
          # Visual Studio의 MSBuild 도구 경로를 찾습니다.
          $msbuildPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" `
            -latest -products * -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe
          # 프로젝트를 Release 모드로 빌드합니다.
          & "$msbuildPath" GitHub_VS2022_Test_Project.sln /p:Configuration=Release
        shell: pwsh
        # Visual Studio 프로젝트를 빌드하고, 이 과정에서 CodeQL이 코드를 분석합니다.

      # Step 11: CodeQL 분석 실행
      - name: CodeQL 분석 실행
        uses: github/codeql-action/analyze@v3
        # 빌드 중 수집된 데이터를 바탕으로 보안 취약점을 분석합니다.
        # 결과는 GitHub의 Security 탭에서 확인할 수 있습니다.

# 주요 변경사항 설명:
# 1. `actions/upload-artifact` 액션을 제거하고 PowerShell 스크립트로 대체했습니다.
# 2. 결과 파일을 직접 처리하는 방식으로 변경했습니다.
# 3. 결과 파일의 존재 여부를 확인하고 내용을 로그에 출력하도록 했습니다.

# 이 수정된 버전은:
# - 외부 액션에 의존하지 않아 더 안정적입니다
# - 결과를 로그에서 직접 확인할 수 있습니다
# - 파일 처리 과정을 더 상세하게 확인할 수 있습니다

# 이렇게 수정하면 이전에 발생하던 `actions/upload-artifact` 관련 에러를 피할 수 있습니다.
